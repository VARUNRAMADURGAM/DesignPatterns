The Composite Design Pattern is used when you need to treat individual objects and compositions of objects uniformly. In the context of a banking application, this pattern can be applied to model hierarchical structures, such as account hierarchies, organizational units, or portfolio management.

Example: Bank Account Portfolio
In a banking application, customers might hold different types of accounts, such as:

1.Savings Accounts
2.Current/Checking Accounts
3.Fixed Deposit Accounts
4.Loan Accounts
Some customers, especially high-net-worth individuals or corporate entities, might manage their accounts as portfolios, which group multiple accounts together for easier management and reporting.

Using the Composite Design Pattern, we can represent individual accounts and portfolios (group of accounts) uniformly.

Structure
1. Component Interface: Defines common operations for both individual accounts and account groups.


public interface AccountComponent {
    double getBalance();
}

2.Leaf Class (Individual Account): Represents an individual account.

public class Account implements AccountComponent {
    private String accountNumber;
    private double balance;

    public Account(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    @Override
    public double getBalance() {
        return balance;
    }
}

3.Composite Class (Portfolio): Represents a group of accounts (can contain both accounts and other portfolios).

import java.util.ArrayList;
import java.util.List;

public class AccountPortfolio implements AccountComponent {
    private List<AccountComponent> accounts = new ArrayList<>();

    public void addAccount(AccountComponent account) {
        accounts.add(account);
    }

    public void removeAccount(AccountComponent account) {
        accounts.remove(account);
    }

    @Override
    public double getBalance() {
        return accounts.stream().mapToDouble(AccountComponent::getBalance).sum();
    }
}
Real-Time Example
Consider the following hierarchy in a banking application:

Customer 1
Savings Account (Balance: $5,000)
Current Account (Balance: $10,000)
Customer 2
Portfolio
Savings Account (Balance: $2,000)
Fixed Deposit (Balance: $20,000)
Sub-Portfolio
Loan Account (Balance: -$15,000)
Checking Account (Balance: $8,000)

Code Example
public class CompositePatternExample {
    public static void main(String[] args) {
        // Create individual accounts
        Account savings = new Account("SAV123", 5000);
        Account current = new Account("CUR123", 10000);
        Account fixedDeposit = new Account("FD123", 20000);
        Account loan = new Account("LN123", -15000);
        Account checking = new Account("CHK123", 8000);

        // Create sub-portfolio
        AccountPortfolio subPortfolio = new AccountPortfolio();
        subPortfolio.addAccount(loan);
        subPortfolio.addAccount(checking);

        // Create main portfolio for Customer 2
        AccountPortfolio mainPortfolio = new AccountPortfolio();
        mainPortfolio.addAccount(savings);
        mainPortfolio.addAccount(fixedDeposit);
        mainPortfolio.addAccount(subPortfolio);

        // Calculate total balance for Customer 2
        System.out.println("Total Balance in Main Portfolio: " + mainPortfolio.getBalance());

        // Customer 1 with individual accounts
        AccountPortfolio customer1Portfolio = new AccountPortfolio();
        customer1Portfolio.addAccount(savings);
        customer1Portfolio.addAccount(current);

        System.out.println("Total Balance for Customer 1: " + customer1Portfolio.getBalance());
    }
}
Output:
Total Balance in Main Portfolio: 33000.0
Total Balance for Customer 1: 15000.0


Advantages in Banking Applications
Uniformity: You can treat individual accounts and account portfolios the same way (e.g., calculate total balance, apply interest, or generate reports).
Scalability: Adding new account types or sub-portfolios is straightforward.
Flexibility: Makes it easy to represent complex hierarchies of accounts and portfolios.
